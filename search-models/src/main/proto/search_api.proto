syntax = "proto3";
option java_outer_classname = "SearchApiProto";
option java_multiple_files = true;

package com.krickert.search.api;

import "google/protobuf/timestamp.proto";

// Enums for search strategy
enum SortType {
  FIELD = 0;
  SCORE = 1;
}

enum SortOrder {
  ASC = 0;
  DESC = 1;
}

message SortOptions {
  SortType sortType = 1;
  SortOrder sortOrder = 2;
  optional string sortField = 3;  // Field to sort on, required if sortType is FIELD
}

message FacetField {
  string field = 1;
  optional int32 limit = 2;        // Limit the number of facets returned
  optional bool missing = 3;       // Include counts for missing fields
  optional string prefix = 4;      // Limit to facets starting with a prefix
}

message FacetRange {
  string field = 1;
  optional string start = 2;       // Range start value
  optional string end = 3;         // Range end value
  optional string gap = 4;         // Gap for range segmentation
  optional bool hardend = 5;       // Force end of range to be the given end
  optional string other = 6;       // Additional counts: before, after, between
}

message FacetQuery {
  string query = 1;               // Facet query string
}

// Filters for keyword-based or vector-based search
message Filter {
  string field = 1;
  string value = 2;
}

// Similarity options used for vector-based searches
message SimilarityOptions {
  optional float minReturn = 1;         // Minimum similarity for return, defaults to 1
  optional float minTraverse = 2;       // Minimum similarity to traverse neighbors, defaults to -infinity
  repeated Filter preFilter = 3;        // Pre-filter for candidate documents
}

// Parameters for a semantic vector search
message SemanticOptions {
  optional int32 topK = 1;              // Maximum number of top results
  SimilarityOptions similarity = 2;     // Vector similarity configuration
  repeated string includeTags = 3;      // Tags to include
  repeated string excludeTags = 4;      // Tags to exclude
  repeated string vectorFields = 5;     // Names of vector fields to use
}


// Parameters for keyword-based searches
message KeywordOptions {
  optional bool boostWithSemantic = 1;  // Boost the results using semantic scoring
}

// Combined search strategies, one-of defines that only one type of search is valid
message SearchStrategyOptions {
  oneof search_strategy {
    SemanticOptions semantic = 1;
    KeywordOptions keyword = 2;
  }
}

message Param {
  string field = 1;
  string value = 2;
}

message Params {
  repeated Param param = 1;
}

// Search request for all search types
message SearchRequest {
  string query = 1;                           // Search query string
  optional int32 start = 2;                   // Start index for paging
  optional int32 numResults = 3;              // Number of results to return
  repeated string filterQueries = 4;          // Filter queries to refine search
  optional SortOptions sort = 5;              // Sorting options
  repeated FacetField facetFields = 6;        // Fields to facet on
  repeated FacetRange facetRanges = 7;        // Range facets
  repeated FacetQuery facetQueries = 8;       // Query facets
  SearchStrategyOptions strategy = 9;         // Search strategy options
  optional Params additionalParams = 11;      // Additional parameters to append to the search
}

message SearchResult {
  string id = 1;                         // Document ID
  string snippet = 3;                    // A snippet of the document content
  repeated string matchedText = 4;       // Text matched by vectors or keyword
  map<string, string> fields = 5;        // Additional fields from the document
}


// Facet result for returned facet data
message FacetResult {
  string facet = 1;                      // Facet value
  int64 facetCount = 2;                  // Count for the facet value
}

// Response message for search results, including facets and metadata
message SearchResponse {
  repeated SearchResult results = 1;     // Search results
  map<string, FacetResult> facets = 2;   // Facet information
  int64 totalResults = 3;                // Total number of results
  int32 qTime = 4;                       // Time taken to perform the search in ms
  google.protobuf.Timestamp timeOfSearch = 5;  // Time of the search
}

// Request for developer/test cases
message DevRequest {
  map<string, string> requestParams = 1; // Custom request params for testing
  bool useBasicDefaults = 2;             // Use defaults from configuration
}

// The search service definition
service SearchService {
  rpc Search(SearchRequest) returns (SearchResponse);
  rpc DeveloperSearch(DevRequest) returns (SearchResponse);
}
